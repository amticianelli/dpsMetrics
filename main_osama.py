# -*- coding: utf-8 -*-
"""IoTHubCountDevices.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rNLg9l8G1aXKLWnkfgrD3Y1MccFAnaVS
"""

import duckdb
import pandas as pd
import yaml
import asyncio
from src.DPS import DPS
from src.HUB import HUB
from src.IoT import IoT, Device
from src.helpers import timeis
import datetime

@timeis
def main():
  # Load data from YAML file
  with open('C:\\Osama\\Code\\IoT\\dpsMetrics\\data.yaml', 'r') as file:
      data = yaml.safe_load(file)

  # DPS Data
  iot = IoT()
  DPSs = [
      DPS(name = dps['dpsname'],
          key = dps['key'],
          policyName = dps['policy_name'])
      for dps in data['dps']
  ]
  # IoTHub Data
  HUBs = [
      HUB(name = hub['hubname'],
          key = hub['key'],
          policyName = hub['policy_name'])
      for hub in data['hubs']
  ]

  
  async def processDPSs(isConTest):
      DPSTasks = list()
      for dps in DPSs:
          DPSTasks.append(asyncio.create_task(dps.getDPSRegistrations(isConTest=isConTest)))
      await asyncio.gather(*DPSTasks)
  
  async def processHUBs(isConTest):
      HUBTasks = list()
      for hub in HUBs:
          HUBTasks.append(asyncio.create_task(hub.getDevices(isConTest=isConTest)))
      await asyncio.gather(*HUBTasks)


  # Connection Test
  print('### Testing Connection to IoT Hubs ###')
  asyncio.run(processHUBs(isConTest=True))       
  print('### Finished testing IoT Hubs connectivity ###\n\n')

  print('### Testing Connection to DPSs ###')
  asyncio.run(processDPSs(isConTest=True))
  print('### Finished testing DPSs connectivity ###\n\n')

  # Collecting data
  print("### Counting devices in IoT Hubs ###")
  asyncio.run(processHUBs(isConTest=False))
  print(f'''TOTAL NUMBER OF DEVICES: {len(HUB.allDevices)}
NUMBER OF UNIQUE DEVICES: {len(HUB.uniqueDevices)}
NUMBER OF DUPLICATE DEVICES: {len(HUB.duplicateDevices)}
### Finished Counting Devices ###\n\n''')

  print('### Counting Registrations in DPSs ###')
  asyncio.run(processDPSs(isConTest=False))
  print(f'''TOTAL NUMBER OF REGISTRATIONS: {len(DPS.allRegistrations)}
NUMBER OF UNIQUE REGISTRATIONS: {len(DPS.uniqueRegistrations)}
NUMBER OF DUPLICATE REGISTRATIONS: {len(DPS.duplicateRegistrations)}
### Finished Counting Registrations ###\n\n''')

  for device in iot.devices.values():
    print(device)
  # print(f'Devices without DPS: {iot.getDevicesWithoutDPS()}')
  # print(iot.createDF())



  # dfHubDevices = pd.DataFrame(HUB.allDevices)
  # allDevices = []


  # dfRegistrations = pd.DataFrame(DPS.allRegistrations)
  # allRegistrations = []


  # print(duckdb.query("""
  # SELECT
  #   dpsname,
  #   COUNT(1) registrationsNotInHub
  # FROM dfRegistrations dR
  # LEFT JOIN dfHubDevices dD ON 1=1
  #   AND dR.assignedHub = dD.iothub
  #   AND dR.deviceId = dD.deviceId
  # WHERE 1=1
  #   AND dD.iothub IS NULL
  # GROUP BY dpsname
  # """))

  # print(duckdb.query("""
  # SELECT
  #   dD.iothub,
  #   COUNT(1) AS devicesWithoutDPSReg
  # FROM dfRegistrations dR
  # RIGHT JOIN dfHubDevices dD ON 1=1
  #   AND dR.assignedHub = dD.iothub
  #   AND dR.deviceId = dD.deviceId
  # WHERE dR.registrationId IS NULL
  # GROUP BY
  #   dD.iothub
  # """))

  # print(duckdb.query("""
  # SELECT
  #   COUNT(1) AS registrationsWithHubs
  # FROM dfRegistrations dR
  # JOIN dfHubDevices dD ON 1=1
  #   AND dR.assignedHub = dD.iothub
  #   AND dR.deviceId = dD.deviceId
  # """))

  # print(duckdb.query("""
  # SELECT COUNT(1) duplicateDevices FROM(
  # SELECT
  #   dpsname,
  #   dR.deviceId,
  #   COUNT(1) sameRegistrationForMultipleHubs
  # FROM dfRegistrations dR
  # JOIN dfHubDevices dD ON 1=1
  #   AND dR.assignedHub = dD.iothub
  #   AND dR.deviceId = dD.deviceId
  # GROUP BY dpsname, dR.deviceId
  # HAVING COUNT(1) > 1)
  # """))



  # queryDevicesWithoutDPS = """
  # SELECT
  #   dD.*
  # FROM dfRegistrations dR
  # RIGHT JOIN dfHubDevices dD ON 1=1
  #   AND dR.assignedHub = dD.iothub
  #   AND dR.deviceId = dD.deviceId
  # WHERE dR.registrationId IS NULL
  # """

  # queryRegistrationsWithoutHubs = """
  # SELECT
  #   dR.*
  # FROM dfRegistrations dR
  # LEFT JOIN dfHubDevices dD ON 1=1
  #   AND dR.assignedHub = dD.iothub
  #   AND dR.deviceId = dD.deviceId
  # WHERE 1=1
  #   AND dD.iothub IS NULL
  # """

  # queryDuplicateRegistrations = """
  # SELECT
  #   dpsname,
  #   dR.deviceId,
  #   COUNT(1) sameRegistrationForMultipleHubs
  # FROM dfRegistrations dR
  # JOIN dfHubDevices dD ON 1=1
  #   AND dR.assignedHub = dD.iothub
  #   AND dR.deviceId = dD.deviceId
  # GROUP BY dpsname, dR.deviceId
  # HAVING COUNT(1) > 1
  # """
  # Using Arrow to compress the results

  # tbl = duckdb.query(queryDevicesWithoutDPS).arrow()
  # df = tbl.to_pandas().to_csv('out/devicesWithoutDPS.csv')

  # tbl = duckdb.query(queryRegistrationsWithoutHubs).arrow()
  # df = tbl.to_pandas().to_csv('out/regWithoutHubs.csv')

  # tbl = duckdb.query(queryDuplicateRegistrations).arrow()
  # df = tbl.to_pandas().to_csv('out/duplicateRegistrations.csv')

if __name__ == "__main__":
    main()